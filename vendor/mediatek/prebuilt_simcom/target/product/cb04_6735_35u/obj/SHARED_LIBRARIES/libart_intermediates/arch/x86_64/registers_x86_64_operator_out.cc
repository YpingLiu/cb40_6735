#include <iostream>

#include "arch/x86_64/registers_x86_64.h"

// This was automatically generated by art/tools/generate-operator-out.py --- do not edit!
namespace art {
namespace x86_64 {
std::ostream& operator<<(std::ostream& os, const Register& rhs) {
  switch (rhs) {
    case RAX: os << "RAX"; break;
    case RCX: os << "RCX"; break;
    case RDX: os << "RDX"; break;
    case RBX: os << "RBX"; break;
    case RSP: os << "RSP"; break;
    case RBP: os << "RBP"; break;
    case RSI: os << "RSI"; break;
    case RDI: os << "RDI"; break;
    case R8: os << "R8"; break;
    case R9: os << "R9"; break;
    case R10: os << "R10"; break;
    case R11: os << "R11"; break;
    case R12: os << "R12"; break;
    case R13: os << "R13"; break;
    case R14: os << "R14"; break;
    case R15: os << "R15"; break;
    case kNumberOfCpuRegisters: os << "NumberOfCpuRegisters"; break;
    case kNoRegister: os << "NoRegister"; break;
    default: os << "Register[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace x86_64
}  // namespace art

// This was automatically generated by art/tools/generate-operator-out.py --- do not edit!
namespace art {
namespace x86_64 {
std::ostream& operator<<(std::ostream& os, const FloatRegister& rhs) {
  switch (rhs) {
    case XMM0: os << "XMM0"; break;
    case XMM1: os << "XMM1"; break;
    case XMM2: os << "XMM2"; break;
    case XMM3: os << "XMM3"; break;
    case XMM4: os << "XMM4"; break;
    case XMM5: os << "XMM5"; break;
    case XMM6: os << "XMM6"; break;
    case XMM7: os << "XMM7"; break;
    case XMM8: os << "XMM8"; break;
    case XMM9: os << "XMM9"; break;
    case XMM10: os << "XMM10"; break;
    case XMM11: os << "XMM11"; break;
    case XMM12: os << "XMM12"; break;
    case XMM13: os << "XMM13"; break;
    case XMM14: os << "XMM14"; break;
    case XMM15: os << "XMM15"; break;
    case kNumberOfFloatRegisters: os << "NumberOfFloatRegisters"; break;
    default: os << "FloatRegister[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace x86_64
}  // namespace art

