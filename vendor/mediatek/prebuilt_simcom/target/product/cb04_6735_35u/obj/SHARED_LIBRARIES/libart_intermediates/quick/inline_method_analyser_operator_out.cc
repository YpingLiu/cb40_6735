#include <iostream>

#include "quick/inline_method_analyser.h"

// This was automatically generated by art/tools/generate-operator-out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, const InlineMethodOpcode& rhs) {
  switch (rhs) {
    case kIntrinsicDoubleCvt: os << "IntrinsicDoubleCvt"; break;
    case kIntrinsicFloatCvt: os << "IntrinsicFloatCvt"; break;
    case kIntrinsicReverseBits: os << "IntrinsicReverseBits"; break;
    case kIntrinsicReverseBytes: os << "IntrinsicReverseBytes"; break;
    case kIntrinsicAbsInt: os << "IntrinsicAbsInt"; break;
    case kIntrinsicAbsLong: os << "IntrinsicAbsLong"; break;
    case kIntrinsicAbsFloat: os << "IntrinsicAbsFloat"; break;
    case kIntrinsicAbsDouble: os << "IntrinsicAbsDouble"; break;
    case kIntrinsicMinMaxInt: os << "IntrinsicMinMaxInt"; break;
    case kIntrinsicMinMaxLong: os << "IntrinsicMinMaxLong"; break;
    case kIntrinsicMinMaxFloat: os << "IntrinsicMinMaxFloat"; break;
    case kIntrinsicMinMaxDouble: os << "IntrinsicMinMaxDouble"; break;
    case kIntrinsicSqrt: os << "IntrinsicSqrt"; break;
    case kIntrinsicCeil: os << "IntrinsicCeil"; break;
    case kIntrinsicFloor: os << "IntrinsicFloor"; break;
    case kIntrinsicRint: os << "IntrinsicRint"; break;
    case kIntrinsicRoundFloat: os << "IntrinsicRoundFloat"; break;
    case kIntrinsicRoundDouble: os << "IntrinsicRoundDouble"; break;
    case kIntrinsicReferenceGetReferent: os << "IntrinsicReferenceGetReferent"; break;
    case kIntrinsicCharAt: os << "IntrinsicCharAt"; break;
    case kIntrinsicCompareTo: os << "IntrinsicCompareTo"; break;
    case kIntrinsicIsEmptyOrLength: os << "IntrinsicIsEmptyOrLength"; break;
    case kIntrinsicIndexOf: os << "IntrinsicIndexOf"; break;
    case kIntrinsicCurrentThread: os << "IntrinsicCurrentThread"; break;
    case kIntrinsicPeek: os << "IntrinsicPeek"; break;
    case kIntrinsicPoke: os << "IntrinsicPoke"; break;
    case kIntrinsicCas: os << "IntrinsicCas"; break;
    case kIntrinsicUnsafeGet: os << "IntrinsicUnsafeGet"; break;
    case kIntrinsicUnsafePut: os << "IntrinsicUnsafePut"; break;
    case kIntrinsicSystemArrayCopyCharArray: os << "IntrinsicSystemArrayCopyCharArray"; break;
    case kInlineOpNop: os << "InlineOpNop"; break;
    case kInlineOpReturnArg: os << "InlineOpReturnArg"; break;
    case kInlineOpNonWideConst: os << "InlineOpNonWideConst"; break;
    case kInlineOpIGet: os << "InlineOpIGet"; break;
    case kInlineOpIPut: os << "InlineOpIPut"; break;
    default: os << "InlineMethodOpcode[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

// This was automatically generated by art/tools/generate-operator-out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, const InlineMethodFlags& rhs) {
  switch (rhs) {
    case kNoInlineMethodFlags: os << "NoInlineMethodFlags"; break;
    case kInlineIntrinsic: os << "InlineIntrinsic"; break;
    case kInlineSpecial: os << "InlineSpecial"; break;
    default: os << "InlineMethodFlags[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

// This was automatically generated by art/tools/generate-operator-out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, const IntrinsicFlags& rhs) {
  switch (rhs) {
    case kIntrinsicFlagNone: os << "IntrinsicFlagNone"; break;
    case kIntrinsicFlagMin: os << "IntrinsicFlagMin"; break;
    case kIntrinsicFlagIsVolatile: os << "IntrinsicFlagIsVolatile"; break;
    case kIntrinsicFlagIsObject: os << "IntrinsicFlagIsObject"; break;
    case kIntrinsicFlagIsOrdered: os << "IntrinsicFlagIsOrdered"; break;
    default: os << "IntrinsicFlags[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

